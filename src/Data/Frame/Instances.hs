{-# LANGUAGE TypeFamilies, TypeOperators, TypeApplications #-}
{-# LANGUAGE FlexibleInstances, FlexibleContexts #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-orphans #-}

module Data.Frame.Instances where

import Data.Csv(ToNamedRecord(toNamedRecord), 
                namedRecord, (.=),
                ToField)
import qualified Data.ByteString.Char8 as BS

import Labels

--- # Enum instances # ---

-- We need this to allow grouping with columns that contain missing values
-- Nothing is a special group 0 while Just values are a group each.
instance (Enum a) => Enum (Maybe a) where
  fromEnum Nothing  = 0
  fromEnum (Just x) = succ . fromEnum $ x

  toEnum 0 = Nothing
  toEnum x = Just . toEnum . pred $ x

-- We need this to allow grouping with composite keys. Composite key = tuple valued column.
-- How many unique values can each tuple component contain.
-- Valeus above constK will overflow and information will be lost.
constK :: Int
constK = 30000

instance (Enum a, Enum b) => Enum (a, b) where
    fromEnum (a, b) = (fromEnum a) * constK + ((fromEnum b) `mod` constK)

    toEnum x        =  (a', b')
        where
            a' = toEnum (x `div` constK)
            b' = toEnum (x `mod` constK)

instance (Enum a, Enum b, Enum c) => Enum (a, b, c) where
 fromEnum (a, b, c) = fromEnum (a, b) * constK + ((fromEnum c) `mod` constK)
 toEnum   x         = (toEnum a', toEnum b', toEnum c')
     where
         ab = x  `div` constK
         c' = x  `mod` constK
         a' = ab `div` constK
         b' = ab `mod` constK

-- Actually this led me to the following question.
-- Assume there are fromEnum instances that yield Z+ from types A and B.
-- Look for a way to define fromEnum for (A, B) so
-- Find an operator * :: Z+ -> Z+ -> Z+ such that the following holds (and constK is not needed).
-- Let F be a family of partially applied functions from the left F = {0*, 1*, 2*, 3*, ...}
-- forall (F f1, F f2, Z+ n, Z+ k) f1(n) != f2(k) -> * is a good fit for projecting two element product types to int.
-- For example the above property is not satisfied by regular multiplication (* = regular positve integer multiplication).
-- If we take f1 = 3* and f2 = 6* then f1 4 = 12 = f2 2 so there is no way to know if A = 3 and B = 4 or A = 6 and B = 2.
-- The goal is to have a unique as defined mapping from (A, B) to Z+ via (toEnum A * toEnum B)
-- Overwriting mappings like hashing don't fit in.

--- # ToNamedRecord Instances # ---

-- Autogenerated via a script
instance (ToField value1) => ToNamedRecord (lbl1 := value1) where
    toNamedRecord (lbl1 := value1) = namedRecord [(n !! 0) .= value1]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1)
instance (ToField value1,ToField value2) => ToNamedRecord (lbl1 := value1,lbl2 := value2) where
    toNamedRecord (lbl1 := value1,lbl2 := value2) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2)
instance (ToField value1,ToField value2,ToField value3) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3)
instance (ToField value1,ToField value2,ToField value3,ToField value4) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11,ToField value12) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11,(n !! 11) .= value12]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11,ToField value12,ToField value13) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11,(n !! 11) .= value12,(n !! 12) .= value13]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11,ToField value12,ToField value13,ToField value14) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11,(n !! 11) .= value12,(n !! 12) .= value13,(n !! 13) .= value14]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11,ToField value12,ToField value13,ToField value14,ToField value15) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11,(n !! 11) .= value12,(n !! 12) .= value13,(n !! 13) .= value14,(n !! 14) .= value15]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11,ToField value12,ToField value13,ToField value14,ToField value15,ToField value16) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11,(n !! 11) .= value12,(n !! 12) .= value13,(n !! 13) .= value14,(n !! 14) .= value15,(n !! 15) .= value16]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11,ToField value12,ToField value13,ToField value14,ToField value15,ToField value16,ToField value17) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11,(n !! 11) .= value12,(n !! 12) .= value13,(n !! 13) .= value14,(n !! 14) .= value15,(n !! 15) .= value16,(n !! 16) .= value17]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11,ToField value12,ToField value13,ToField value14,ToField value15,ToField value16,ToField value17,ToField value18) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11,(n !! 11) .= value12,(n !! 12) .= value13,(n !! 13) .= value14,(n !! 14) .= value15,(n !! 15) .= value16,(n !! 16) .= value17,(n !! 17) .= value18]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11,ToField value12,ToField value13,ToField value14,ToField value15,ToField value16,ToField value17,ToField value18,ToField value19) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11,(n !! 11) .= value12,(n !! 12) .= value13,(n !! 13) .= value14,(n !! 14) .= value15,(n !! 15) .= value16,(n !! 16) .= value17,(n !! 17) .= value18,(n !! 18) .= value19]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11,ToField value12,ToField value13,ToField value14,ToField value15,ToField value16,ToField value17,ToField value18,ToField value19,ToField value20) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11,(n !! 11) .= value12,(n !! 12) .= value13,(n !! 13) .= value14,(n !! 14) .= value15,(n !! 15) .= value16,(n !! 16) .= value17,(n !! 17) .= value18,(n !! 18) .= value19,(n !! 19) .= value20]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11,ToField value12,ToField value13,ToField value14,ToField value15,ToField value16,ToField value17,ToField value18,ToField value19,ToField value20,ToField value21) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20,lbl21 := value21) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20,lbl21 := value21) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11,(n !! 11) .= value12,(n !! 12) .= value13,(n !! 13) .= value14,(n !! 14) .= value15,(n !! 15) .= value16,(n !! 16) .= value17,(n !! 17) .= value18,(n !! 18) .= value19,(n !! 19) .= value20,(n !! 20) .= value21]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20,lbl21 := value21)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11,ToField value12,ToField value13,ToField value14,ToField value15,ToField value16,ToField value17,ToField value18,ToField value19,ToField value20,ToField value21,ToField value22) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20,lbl21 := value21,lbl22 := value22) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20,lbl21 := value21,lbl22 := value22) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11,(n !! 11) .= value12,(n !! 12) .= value13,(n !! 13) .= value14,(n !! 14) .= value15,(n !! 15) .= value16,(n !! 16) .= value17,(n !! 17) .= value18,(n !! 18) .= value19,(n !! 19) .= value20,(n !! 20) .= value21,(n !! 21) .= value22]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20,lbl21 := value21,lbl22 := value22)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11,ToField value12,ToField value13,ToField value14,ToField value15,ToField value16,ToField value17,ToField value18,ToField value19,ToField value20,ToField value21,ToField value22,ToField value23) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20,lbl21 := value21,lbl22 := value22,lbl23 := value23) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20,lbl21 := value21,lbl22 := value22,lbl23 := value23) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11,(n !! 11) .= value12,(n !! 12) .= value13,(n !! 13) .= value14,(n !! 14) .= value15,(n !! 15) .= value16,(n !! 16) .= value17,(n !! 17) .= value18,(n !! 18) .= value19,(n !! 19) .= value20,(n !! 20) .= value21,(n !! 21) .= value22,(n !! 22) .= value23]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20,lbl21 := value21,lbl22 := value22,lbl23 := value23)
instance (ToField value1,ToField value2,ToField value3,ToField value4,ToField value5,ToField value6,ToField value7,ToField value8,ToField value9,ToField value10,ToField value11,ToField value12,ToField value13,ToField value14,ToField value15,ToField value16,ToField value17,ToField value18,ToField value19,ToField value20,ToField value21,ToField value22,ToField value23,ToField value24) => ToNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20,lbl21 := value21,lbl22 := value22,lbl23 := value23,lbl24 := value24) where
    toNamedRecord (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20,lbl21 := value21,lbl22 := value22,lbl23 := value23,lbl24 := value24) = namedRecord [(n !! 0) .= value1,(n !! 1) .= value2,(n !! 2) .= value3,(n !! 3) .= value4,(n !! 4) .= value5,(n !! 5) .= value6,(n !! 6) .= value7,(n !! 7) .= value8,(n !! 8) .= value9,(n !! 9) .= value10,(n !! 10) .= value11,(n !! 11) .= value12,(n !! 12) .= value13,(n !! 13) .= value14,(n !! 14) .= value15,(n !! 15) .= value16,(n !! 16) .= value17,(n !! 17) .= value18,(n !! 18) .= value19,(n !! 19) .= value20,(n !! 20) .= value21,(n !! 21) .= value22,(n !! 22) .= value23,(n !! 23) .= value24]
        where n = (map BS.pack) . labels . pure $ (lbl1 := value1,lbl2 := value2,lbl3 := value3,lbl4 := value4,lbl5 := value5,lbl6 := value6,lbl7 := value7,lbl8 := value8,lbl9 := value9,lbl10 := value10,lbl11 := value11,lbl12 := value12,lbl13 := value13,lbl14 := value14,lbl15 := value15,lbl16 := value16,lbl17 := value17,lbl18 := value18,lbl19 := value19,lbl20 := value20,lbl21 := value21,lbl22 := value22,lbl23 := value23,lbl24 := value24)
